// automatically generated by the FlatBuffers compiler, do not modify

package mj2.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Wall extends Table {
  public static Wall getRootAsWall(ByteBuffer _bb) { return getRootAsWall(_bb, new Wall()); }
  public static Wall getRootAsWall(ByteBuffer _bb, Wall obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Wall __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int movieId() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public Comment comments(int j) { return comments(new Comment(), j); }
  public Comment comments(Comment obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int commentsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createWall(FlatBufferBuilder builder,
      int movieId,
      int commentsOffset) {
    builder.startObject(2);
    Wall.addComments(builder, commentsOffset);
    Wall.addMovieId(builder, movieId);
    return Wall.endWall(builder);
  }

  public static void startWall(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addMovieId(FlatBufferBuilder builder, int movieId) { builder.addInt(0, movieId, 0); }
  public static void addComments(FlatBufferBuilder builder, int commentsOffset) { builder.addOffset(1, commentsOffset, 0); }
  public static int createCommentsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCommentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endWall(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishWallBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

